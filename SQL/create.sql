CREATE TABLE CODER
(USERNAME VARCHAR(50) PRIMARY KEY,
FNAME VARCHAR(50) NOT NULL,
LNAME VARCHAR(50) NOT NULL,
EMAIL VARCHAR(50) NOT NULL,
AGE NUMERIC(3,0) NOT NULL,
TYPE VARCHAR(10) NOT NULL,
COMPANY VARCHAR(50),
CHECK ( AGE>17 AND EMAIL LIKE '%@%.%' AND TYPE IN ('general','premium'))
);

CREATE TABLE SERVER
(
IP VARCHAR(15),
LOCATION VARCHAR(50) NOT NULL,
PRIMARY KEY(IP),
CHECK (IP LIKE '___.___.___.___' AND
LOCATION IN ('Bangalore','Albuquerque','Medellin','London','Kampala','Sydney'))
);

CREATE TABLE EXTENSION
(
EXTENSION VARCHAR(10),
FILE_TYPE VARCHAR(20) DEFAULT '.txt',
PRIMARY KEY(EXTENSION),
CHECK(EXTENSION LIKE '.%')
);

CREATE TABLE SALARY
(
JOB_DESC VARCHAR(50),
SALARY NUMERIC(10,2) NOT NULL,
PRIMARY KEY(JOB_DESC),
CHECK(SALARY>0)
);

CREATE TABLE REPOSITORY
(
REPO_NAME VARCHAR(50) PRIMARY KEY,
OWNER_USERNAME VARCHAR(50) NOT NULL,
DESCRIPTION VARCHAR(100),
IP VARCHAR(15) NOT NULL,
CTIME TIMESTAMP DEFAULT NOW(),
FOREIGN KEY (OWNER_USERNAME) REFERENCES CODER(USERNAME) ON DELETE CASCADE,
FOREIGN KEY (IP) REFERENCES SERVER(IP) ON DELETE CASCADE
);

CREATE TABLE STARRED
(
USERNAME VARCHAR(50) NOT NULL,
REPO_NAME VARCHAR(50) NOT NULL,
RATING NUMERIC(1,0) NOT NULL,
CHECK ( RATING>=0 AND RATING<=5),
FOREIGN KEY (USERNAME) REFERENCES CODER(USERNAME) ON DELETE CASCADE,
FOREIGN KEY (REPO_NAME) REFERENCES REPOSITORY(REPO_NAME) ON DELETE CASCADE,
PRIMARY KEY (USERNAME,REPO_NAME)
);

CREATE TABLE EMPLOYEE
(
E_ID VARCHAR(13) PRIMARY KEY,
FNAME VARCHAR(50) NOT NULL,
LNAME VARCHAR(50) NOT NULL,
EMAIL VARCHAR(50) NOT NULL,
JOB_DESC VARCHAR(50),
IP VARCHAR(15),
CHECK (E_ID LIKE 'HUB__________'),
CHECK (EMAIL LIKE '%@github.org'),
FOREIGN KEY (JOB_DESC) REFERENCES SALARY(JOB_DESC) ON DELETE SET NULL,
FOREIGN KEY (IP) REFERENCES SERVER(IP) ON DELETE SET NULL	 
);

CREATE TABLE COMMITS
(
TIME_STAMP TIMESTAMP,
TYPE VARCHAR(20),
REPO_NAME VARCHAR(50),
FILE_NAME VARCHAR(50),
FILE_EXTENSION VARCHAR(10),
CONTRIBUTOR VARCHAR(50),
COMMIT_ID INT GENERATED ALWAYS AS IDENTITY,
FOREIGN KEY (CONTRIBUTOR) REFERENCES CODER(USERNAME) ON DELETE SET NULL,
FOREIGN KEY (REPO_NAME) REFERENCES REPOSITORY(REPO_NAME) ON DELETE CASCADE ,
FOREIGN KEY (FILE_EXTENSION) REFERENCES EXTENSION(EXTENSION) ON DELETE SET DEFAULT,
PRIMARY KEY(COMMIT_ID),
CHECK(TYPE IN ('INSERT','DELETE','UPDATE'))
);

CREATE TABLE FILES
(
FILE_NAME VARCHAR(50) NOT NULL,
FILE_EXTENSION VARCHAR(10),
REPO_NAME VARCHAR(50) NOT NULL,
CONTRIBUTOR VARCHAR(50),
SIZE DECIMAL(5,2) NOT NULL,
FOREIGN KEY (CONTRIBUTOR) REFERENCES CODER(USERNAME) ON DELETE SET NULL,
FOREIGN KEY (REPO_NAME) REFERENCES REPOSITORY(REPO_NAME) ON DELETE CASCADE ,
FOREIGN KEY (FILE_EXTENSION) REFERENCES EXTENSION(EXTENSION) ON DELETE SET NULL,
PRIMARY KEY(FILE_NAME,REPO_NAME,FILE_EXTENSION),
CHECK(SIZE>0)
);

CREATE OR REPLACE FUNCTION insert_file()
  RETURNS trigger AS
$BODY$
BEGIN
     	INSERT INTO commits values(now(),'INSERT',new.REPO_NAME,new.FILE_NAME,new.FILE_EXTENSION,new.CONTRIBUTOR);
     	RETURN new;
END;
$BODY$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_file()
  RETURNS trigger AS
$BODY$
BEGIN
   	 IF old.REPO_NAME IN (SELECT REPO_NAME FROM REPOSITORY) THEN
     	INSERT INTO commits values(now(),'UPDATE',old.REPO_NAME,old.FILE_NAME,old.FILE_EXTENSION,old.CONTRIBUTOR);
    	 
   	ELSE
  		 DELETE FROM commits WHERE REPO_NAME=old.REPO_NAME;
  		 END IF;
     	RETURN new;
END;
$BODY$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION delete_file()
  RETURNS trigger AS
$BODY$
BEGIN
   	 IF old.REPO_NAME IN (SELECT REPO_NAME FROM REPOSITORY) THEN
     	INSERT INTO commits values(now(),'DELETE',old.REPO_NAME,old.FILE_NAME,old.FILE_EXTENSION,old.CONTRIBUTOR);

   	ELSE
  		 DELETE FROM commits WHERE REPO_NAME=old.REPO_NAME;
  		 END IF;
     	RETURN old;
    	 
END;
$BODY$ LANGUAGE plpgsql;

CREATE TRIGGER insert_file
  AFTER INSERT
  ON FILES
  FOR EACH ROW
  EXECUTE PROCEDURE insert_file();

CREATE TRIGGER update_file
  BEFORE UPDATE
  ON FILES
  FOR EACH ROW
  EXECUTE PROCEDURE update_file();

CREATE TRIGGER delete_file
  BEFORE DELETE
  ON FILES
  FOR EACH ROW
  EXECUTE PROCEDURE delete_file();



